package Controller;

import View.AlertView;
import View.ChangePasswordView;
import View.HomePageView;
import View.ModifyView;
import database.UserDAO;
import model.User;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class ModifyController {
    private final ModifyView modifyView;
    private final User user;

    public ModifyController(User user) {
        this.user = user;
        this.modifyView = new ModifyView();

        // Inizializza i campi di input con i dati dell'utente
        modifyView.getNomeField().setText(user.getNome());
        modifyView.getCognomeField().setText(user.getCognome());
        modifyView.getEmailField().setText(user.getEmail());

        // Gestisce il salvataggio delle modifiche
        modifyView.addSubmitListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                handleSubmit();
            }
        });

        // Gestisce il cambio della password
        modifyView.addCambiaPswListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                handleChangePassword();
            }
        });
    }

    private void handleSubmit() {
        String nome = modifyView.getNomeField().getText().trim();
        String cognome = modifyView.getCognomeField().getText().trim();
        String email = modifyView.getEmailField().getText().trim();

        // Controllo dei campi vuoti
        if (nome.isEmpty() || nome.equals("Nome")) {
            new AlertView("Il nome non può essere vuoto", modifyView.getFrame());
            return;
        }
        if (cognome.isEmpty() || cognome.equals("Cognome")) {
            new AlertView("Il cognome non può essere vuoto", modifyView.getFrame());
            return;
        }
        if (email.isEmpty() || email.equals("Email")) {
            new AlertView("L'email non può essere vuota", modifyView.getFrame());
            return;
        }

        // Aggiornamento dei dati dell'utente
        user.setNome(nome);
        user.setCognome(cognome);
        user.setEmail(email);

        UserDAO update = new UserDAO(user);
        if (!email.equals(user.getEmail()) && update.emailUsata()) {
            new AlertView("L'Email è già in uso", modifyView.getFrame());
            return;
        }
        if (update.update()) {
            new AlertView("Profilo aggiornato con successo", modifyView.getFrame());
            new HomePageController(user, new HomePageView(user));
            modifyView.getFrame().dispose();
        } else {
            new AlertView("Errore nell'aggiornamento del profilo", modifyView.getFrame());
        }
    }

    private void handleChangePassword() {
        new ChangePasswordController(new ChangePasswordView(), user);
        modifyView.getFrame().dispose();
    }
}
